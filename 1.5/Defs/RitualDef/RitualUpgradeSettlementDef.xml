<?xml version="1.0" encoding="utf-8" ?>
<Defs>

  <!--<AbilityDef ParentName="SpeechBase">
    <defName>SettlementUpgrade</defName>
    <label>upgrade settlement</label>
    <description>Initiate a leader speech to recognize how far our settlement has come. If it goes well, listeners will gain improved mood, respect for the speaker, and possibly new inspirations. If it goes poorly, social damage will occur.</description>
    <groupDef>Leader</groupDef>
    <iconPath>UpgradeSettlement</iconPath>
    <showWhenDrafted>false</showWhenDrafted>
    <comps>
      <li Class="CompProperties_AbilityStartRitual">
        <ritualDef>SettlementUpgrade</ritualDef>
        <allowedForChild>false</allowedForChild>
      </li>
    </comps>
  </AbilityDef>-->

  <PreceptDef>
    <defName>SettlementUpgrade</defName>
    <label>settlement upgrade</label>
    <description>Initiate a leader speech to recognize how far our settlement has come. Colonists will gather, and the leader will speak for a few hours. If all goes well, listeners will feel inspired, and gain respect for the leader. If it goes poorly, the speech will do social damage.</description>
    <ritualPatternBase>SettlementUpgrade</ritualPatternBase>
    <iconPath>UpgradeSettlement</iconPath>
    <ignoreNameUniqueness>true</ignoreNameUniqueness>
    <useCooldownFromAbilityGroupDef>Leader</useCooldownFromAbilityGroupDef>
    <iconIgnoresIdeoColor>true</iconIgnoresIdeoColor>
    <sourcePawnRoleDef>IdeoRole_Leader</sourcePawnRoleDef>
    <!--<sourceAbilityDef>SettlementUpgrade</sourceAbilityDef>-->
    <issue>Ritual</issue>
    <preceptClass>Precept_Ritual</preceptClass>
    <visible>false</visible>
    <countsTowardsPreceptLimit>false</countsTowardsPreceptLimit>
    <selectionWeight>1.0</selectionWeight>
    <classicExtra>true</classicExtra>
    <classic>true</classic>
  </PreceptDef>
  
  <RitualTargetFilterDef>
    <defName>SettlementCenter</defName>
    <workerClass>DanielRenner.SettledIn.RitualTargetFilter_SettlementCenter</workerClass>
  </RitualTargetFilterDef>
  
  <RitualObligationTargetFilterDef>
    <defName>SettlementCenter</defName>
    <workerClass>DanielRenner.SettledIn.RitualObligationTargetWorker_SettlementCenter</workerClass>
    <thingDefs>
      <li>SettlementCenter</li>
    </thingDefs>
  </RitualObligationTargetFilterDef>

  <RitualOutcomeEffectDef>
    <defName>SettlementUpgrade</defName>
    <description>The settlement center will uprade one level. Depending on ritual quality, participants will get between {MINMOOD} and {MAXMOOD} mood for {MOODDAYS} days.</description>
    <workerClass>DanielRenner.SettledIn.RitualOutcomeEffectWorker_SettlementUpgrade</workerClass>
    <comps>
      <li Class="RitualOutcomeComp_PawnStatScaled">
        <label>{PAWN_labelShort}'s social impact</label>
        <labelAbstract>speaker's social impact</labelAbstract>
        <roleId>speaker</roleId>
        <statDef>SocialImpact</statDef>
        <curve>
          <points>
            <li>(0.2, 0.0)</li>
            <li>(0.6, 0.2)</li>
            <li>(1.0, 0.3)</li>
            <li>(1.5, 0.4)</li>
          </points>
        </curve>
      </li>
      <li Class="RitualOutcomeComp_ParticipantCount">
        <label>participant count</label>
        <curve>
          <points>
            <li>(1,  0.07)</li>
            <li>(4,  0.22)</li>
            <li>(7,  0.33)</li>
            <li>(10, 0.4)</li>
          </points>
        </curve>
      </li>
    </comps>
    <outcomeChances>
      <li>
        <label>Encouraging</label>
        <chance>0.7</chance>
        <memory>EncouragingSpeech</memory>
        <positivityIndex>1</positivityIndex>
      </li>
      <li>
        <label>Inspirational</label>
        <chance>0.3</chance>
        <memory>InspirationalSpeech</memory>
        <positivityIndex>2</positivityIndex>
      </li>
    </outcomeChances>
  </RitualOutcomeEffectDef>

  <RitualPatternDef>
    <defName>SettlementUpgrade</defName>
    <ritualBehavior>SettlementUpgrade</ritualBehavior>
    <ritualObligationTargetFilter>SettlementCenter</ritualObligationTargetFilter>
    <ritualTargetFilter>SettlementCenter</ritualTargetFilter>
    <ritualOutcomeEffect>SettlementUpgrade</ritualOutcomeEffect>
    <alwaysStartAnytime>true</alwaysStartAnytime>
    <ritualOnlyForIdeoMembers>false</ritualOnlyForIdeoMembers>
    <canMergeGizmosFromDifferentIdeos>true</canMergeGizmosFromDifferentIdeos>
  </RitualPatternDef>
  
  <RitualBehaviorDef>
    <defName>SettlementUpgrade</defName>
    <workerClass>DanielRenner.SettledIn.RitualBehaviorWorker_SettlementUpgrade</workerClass>
    <durationTicks>5000</durationTicks>
    <letterTitle>{RITUAL_labelCap}</letterTitle>
    <letterText>
      {SPEAKER_labelShort} is giving a {RITUAL_labelIndef}.
      \nIf all goes well, listeners will feel inspired, and gain respect for {SPEAKER_labelShort}. If it goes poorly, the speech will do social damage. Positive effects are reduced for non-{IDEOMEMBERS}.
    </letterText>
    <roles>
      <li Class="RitualRoleTag">
        <label>speaker</label>
        <tag>Leader</tag>
        <id>speaker</id>
        <precept>IdeoRole_Leader</precept>
        <required>True</required>
        <maxCount>1</maxCount>
        <countsAsParticipant>False</countsAsParticipant>
        <allowChild>false</allowChild>
        <mustBeAbleToReachTarget>True</mustBeAbleToReachTarget>
      </li>
    </roles>
    <stages>
      <li>
        <defaultDuty>Spectate</defaultDuty>
        <allowedSpectateSidesOverride>Vertical</allowedSpectateSidesOverride>
        <spectateDistanceOverride>1</spectateDistanceOverride>
        <spectatorsRequired>true</spectatorsRequired>
        <endTriggers>
          <li Class="StageEndTrigger_DurationPercentage">
            <percentage>1</percentage>
          </li>
        </endTriggers>
        <roleBehaviors>
          <li>
            <roleId>speaker</roleId>
            <dutyDef>SpeakOnCell_Leader</dutyDef>
            <speakerInteraction>Speech_Leader</speakerInteraction>
            <customPositions>
              <li Class="RitualPosition_BesideThing" />
            </customPositions>
          </li>
        </roleBehaviors>
        <visualEffectDef>Speech</visualEffectDef>
      </li>
    </stages>
  </RitualBehaviorDef>
</Defs>